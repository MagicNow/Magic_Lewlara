{"version":3,"sources":["perfil.js"],"names":[],"mappingsfile":"perfil.js","sourcesContent":["(function ($) { //função de serialização de objeto para pegar dados de formulários submetidos por ajax com maior facilidade\r\n    $.fn.serializeObject = function () {\r\n\r\n        var self = this,\r\n                json = {},\r\n                push_counters = {},\r\n                patterns = {\r\n                    \"validate\": /^[a-zA-Z][a-zA-Z0-9_]*(?:\\[(?:\\d*|[a-zA-Z0-9_]+)\\])*$/,\r\n                    \"key\": /[a-zA-Z0-9_]+|(?=\\[\\])/g,\r\n                    \"push\": /^$/,\r\n                    \"fixed\": /^\\d+$/,\r\n                    \"named\": /^[a-zA-Z0-9_]+$/\r\n                };\r\n\r\n\r\n        this.build = function (base, key, value) {\r\n            base[key] = value;\r\n            return base;\r\n        };\r\n\r\n        this.push_counter = function (key) {\r\n            if (push_counters[key] === undefined) {\r\n                push_counters[key] = 0;\r\n            }\r\n            return push_counters[key]++;\r\n        };\r\n\r\n        $.each($(this).serializeArray(), function () {\r\n\r\n            // skip invalid keys\r\n            if (!patterns.validate.test(this.name)) {\r\n                return;\r\n            }\r\n\r\n            var k,\r\n                    keys = this.name.match(patterns.key),\r\n                    merge = this.value,\r\n                    reverse_key = this.name;\r\n\r\n            while ((k = keys.pop()) !== undefined) {\r\n\r\n                // adjust reverse_key\r\n                reverse_key = reverse_key.replace(new RegExp(\"\\\\[\" + k + \"\\\\]$\"), '');\r\n\r\n                // push\r\n                if (k.match(patterns.push)) {\r\n                    merge = self.build([], self.push_counter(reverse_key), merge);\r\n                }\r\n\r\n                // fixed\r\n                else if (k.match(patterns.fixed)) {\r\n                    merge = self.build([], k, merge);\r\n                }\r\n\r\n                // named\r\n                else if (k.match(patterns.named)) {\r\n                    merge = self.build({}, k, merge);\r\n                }\r\n            }\r\n\r\n            json = $.extend(true, json, merge);\r\n        });\r\n\r\n        return json;\r\n    };\r\n})(jQuery);\r\n\r\n$(document).on('ready', function () {\r\n\r\n\r\n    //clique de editar troca bloco de informações por um block editável\r\n    $('.toggle-edit-block').on('click', function (e) {\r\n        $(this).parent().parent().find('.edit-block').slideToggle();\r\n        $(this).parent().parent().find('.edit-bt, .info-placeholder').slideToggle();\r\n    });\r\n\r\n\r\n\r\n\r\n    //clique de cancelar troca bloco editável por block de informações \r\n    $('.cancel-edit-block').on('click', function (e) {\r\n        $(this).parent().parent().parent().parent().find('.edit-block').slideToggle();\r\n        $(this).parent().parent().parent().parent().find('.edit-bt, .info-placeholder').slideToggle();\r\n    });\r\n\r\n    //se cancela-se a edição de links pessoais, inputs criados dinâmicamente para inserção de novos valores são removidos\r\n    $('#cancel-links').on('click', function () {\r\n        $('.group-link-pessoal:not(.edit-block)').remove();\r\n    });\r\n\r\n\r\n    $(document).on('change', '.perfil .btn-file :file', function() {\r\n        var input = $(this),\r\n            numFiles = input.get(0).files ? input.get(0).files.length : 1,\r\n            label = input.val().replace(/\\\\/g, '/').replace(/.*\\//, '');\r\n        input.trigger('fileselect', [numFiles, label]);\r\n    });\r\n    \r\n    //no selecionar da imagem, já fazemos o upload dela\r\n    $('#perfil_imagem_upload_bt :file').on('fileselect', function (event, numFiles, label) {\r\n\r\n        $('#usuario_novo_imagem_selecionada').html(label);\r\n\r\n        var length = 0, i = 0, postData = new FormData($('#ajaxProfile')[0]);\r\n\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: baseUrl + \"/meu-perfil/api/update/save-image\",\r\n            contentType: false,\r\n            processData: false,\r\n            data: postData\r\n        }).done(function (data) {\r\n            $('#ajax-msgs').html(''); //certificar-se de limpar o container de mensagens de ajax das operações\r\n            if (data.code == 200) { //200 ok, mostrar mensagens de sucesso\r\n                $('#ajax-msg').removeClass('alert-danger').addClass('alert alert-success');\r\n                length = data.msgs.length;\r\n                for (i; i < length; i++) {\r\n                    $('#ajax-msgs').append('<li>' + data.msgs[i] + '</li>');\r\n                }\r\n                updateImage(); //chamada da função que cuida de atualizar a imagem em display pela que acaba de ser enviada\r\n            } else { //else: qualquer outro código que não 200, implica erro na operação\r\n                $('#ajax-msg').removeClass('alert-success').addClass('alert alert-danger');\r\n                if (!data.msgs) { //se não temos dados, a API falhou\r\n                    $('#ajax-msgs').append('<li>Erro interno no Servidor</li>');\r\n                    return 0;\r\n                }\r\n\r\n                length = data.msgs.length;\r\n                for (i; i < length; i++) {\r\n                    $('#ajax-msgs').append('<li>' + data.msgs[i] + '</li>');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    //adicionar o espaço para que o usuário insira um novo links pessoal\r\n    $('#perfil_adicionar_link_pessoal').on('click', function (e) {\r\n        e.preventDefault();\r\n        link_pessoal_count++; //varíavel global que trata de guardar o número atual de links pessoais\r\n        var html = '<div class=\"col-sm-12\"><div class=\"col-sm-5 pt7\"><input class=\"form-control\" name=\"link_pessoal['+link_pessoal_count+']\" type=\"text\"></div></div>'; //html do novo input\r\n        var inputs = $('.group-link-pessoal > div');\r\n        inputs.eq( inputs.length - 2).after(html); //inserindo o novo input logo antes dos botões de salvar alteração\r\n    });\r\n\r\n\r\n    //no click do botão de salvar alterações, salvamos o que quer que tenha sido alterado\r\n    $('.save-edit-block').on('click', function (e) {\r\n\r\n        var mainparent = $(this).parent().parent().parent().parent(), //raíz da qual usamos muito para alterar estados de display de elementos\r\n                length = 0, i = 0,\r\n                postData = JSON.stringify($('#ajaxProfile').serializeObject()), //mandaremos um JSON do nosso form serializado para a nossa API\r\n                object = $(this).attr('id'); //cada botão de salvar tem um id referente a propriedade que está alterando, usamos essa identificação para dizer a API o que estamos alterando\r\n\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: baseUrl + \"/meu-perfil/api/update/\" + object,\r\n            data: postData\r\n        }).done(function (data) {\r\n            $('#ajax-msgs').html('');//certificar-se de limpar o container de mensagens de ajax das operações\r\n            if (data.code == 200) {\r\n                $('#ajax-msg').removeClass('alert-danger').addClass('alert alert-success');\r\n                length = data.msgs.length;\r\n                for (i; i < length; i++) {\r\n                    $('#ajax-msgs').append('<li>' + data.msgs[i] + '</li>');\r\n                }\r\n                //em caso de sucesso da operação queremos esconder novamente o bloco de edição\r\n                mainparent.find('.edit-block').slideToggle();\r\n                mainparent.find('.edit-bt, .info-placeholder').slideToggle();\r\n                \r\n                switch (object) { //de acordo com o objeto chamamos a função encarregada de fazer com que o DOM reflita as mudanças recém concretizadas pelo back-end\r\n                    case 'save-username':\r\n                        updateUsername();\r\n                        break;\r\n                    case 'save-email':\r\n                        updateEmail();\r\n                        break;\r\n                    case 'save-personal-links':\r\n                        updatePersonalLinks();\r\n                        break;\r\n                    case 'save-names':\r\n                        updateNames();\r\n                        break;\r\n                    default:\r\n                        alert(object);\r\n                }\r\n\r\n            } else {//else: qualquer outro código que não 200, implica erro na operação\r\n                $('#ajax-msg').removeClass('alert-success').addClass('alert alert-danger');\r\n\r\n                if (!data.msgs) {//se não temos dados, a API falhou\r\n                    $('#ajax-msgs').append('<li>Erro interno no Servidor</li>');\r\n                    return 0;\r\n                }\r\n\r\n                length = data.msgs.length;\r\n                for (i; i < length; i++) {\r\n                    $('#ajax-msgs').append('<li>' + data.msgs[i] + '</li>');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//funções simples de atualização do DOM\r\n//para informação sobre como a API retorna esses dados\r\n//referenciar a mesma.\r\n\r\nfunction updateImage() {\r\n    \r\n    $.ajax({\r\n        type: \"POST\", url: baseUrl + \"/meu-perfil/api/get/image\"\r\n    }).done(function (data) {\r\n        $('.img-perfil').attr('src', data);\r\n    });\r\n}\r\n\r\nfunction updateNames() {\r\n    \r\n    $.ajax({\r\n        type: \"POST\", url: baseUrl + \"/meu-perfil/api/get/names\"\r\n    }).done(function (data) {\r\n        $('#label-names').html(data.firstname + ' ' + data.lastname);\r\n    });\r\n}\r\n\r\nfunction updateUsername() {\r\n    \r\n    $.ajax({\r\n        type: \"POST\", url: baseUrl + \"/meu-perfil/api/get/username\"\r\n    }).done(function (data) {\r\n        $('#label-username').html(data);\r\n    });\r\n}\r\n\r\nfunction updatePersonalLinks() {\r\n    var  length = 0, i = 0;\r\n    $.ajax({\r\n        type: \"POST\", url: baseUrl + \"/meu-perfil/api/get/personal-links\"\r\n    }).done(function (data) {\r\n        length = data.length;\r\n         $('#label-personal-links').html('');\r\n        for (i; i < length; i++) {\r\n            $('#label-personal-links').append(data[i] + '<br/>');\r\n        }\r\n    });\r\n}\r\n\r\nfunction updateEmail() {\r\n    \r\n    $.ajax({\r\n        type: \"POST\", url: baseUrl + \"/meu-perfil/api/get/email\"\r\n    }).done(function (data) {\r\n        $('#label-email').html(data);\r\n    });\r\n}"],"sourceRoot":"/source/"}